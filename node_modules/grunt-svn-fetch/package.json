{
  "name": "grunt-svn-fetch",
  "description": "Ensures specified files are checked out or updated from SVN repository.",
  "version": "0.1.2",
  "homepage": "https://github.com/askelkana/svn-fetch",
  "author": {
    "name": "askelkana",
    "email": "askelkana@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/askelkana/svn-fetch.git"
  },
  "bugs": {
    "url": "https://github.com/askelkana/svn-fetch/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/askelkana/svn-fetch/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-svn-fetch\r\n\r\n> Ensures specified files are checked out or updated from SVN repository.\r\n\r\n## Getting Started\r\nThis plugin requires Grunt `~0.4.0`\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n\tnpm install grunt-svn-fetch --save-dev\r\n\r\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n\tgrunt.loadNpmTasks('grunt-svn-fetch');\r\n\r\n## The \"svn_fetch\" task\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `svn_fetch` to the data object passed into `grunt.initConfig()`.\r\n\r\n\tgrunt.initConfig({\r\n\t\tsvn_fetch: {\r\n\t\t\toptions: {\r\n\t\t\t\t// Task-specific options go here.\r\n\t\t\t},\r\n\t\t\tyour_target: {\r\n\t\t\t\toptions: {\r\n\t\t\t\t\t// Target-specific settings and/or options go here.\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t},\r\n\t})\r\n\r\nThe task works by checking for the presence of the ```.svn``` folder under each of the target folders. If present, an update is performed, otherwise a checkout is done.\r\n\r\n### Options\r\n\r\n#### options.bin\r\nType: `String`\r\n\r\nDefault value: `'svn'`\r\n\r\nSpecifies the location of the SVN binary.\r\n\r\n\r\n#### options.repository\r\nType: `String`\r\n\r\nDefault value: `''`\r\n\r\nThe URL of the SVN repository.\r\n\r\n\r\n#### options.path\r\nType: `String`\r\n\r\nDefault value: `''`\r\n\r\nThe base element of the path to where checked out or updated files are placed.\r\n\r\n\r\n### Usage Examples\r\n\r\n\tgrunt.initConfig({\r\n\t\tsvn_fetch: {\r\n\t\t\toptions: {\r\n\t\t\t\t'repository':\t'https://my_repos.com/projectX/trunk/',\r\n\t\t\t\t'path': \t\t'/svn/projectX/src/'\r\n\t\t\t},\r\n\t\t\tprojectX: {\r\n\t    \t\tmap: {\r\n\t\t\t    \t'folderX': 'SVNFolderX',\r\n\t\t\t\t\t'folderY': 'SVNFolderY'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t    },\r\n\t});\r\n\r\nEach entry in ```map``` utilises the ```path``` and ```respository``` options to determine the full path and URL of the items being considered. So, in this case, the first entry would resolve to:\r\n\r\n\t/svn/projectX/src/folderX\r\n\r\nand\r\n\r\n\thttps://my_repos.com/projectX/trunk/SVNFolderX\r\n\r\nNote the inclusion of slashes on the option entries. The plugin makes no effort to ensure slashes are correct.\r\n\r\n## Release History\r\n* 2013-03-13 0.1.0 Initial release\r\n* 2013-07-12 0.1.2 Issue #1 fixed",
  "readmeFilename": "README.md",
  "_id": "grunt-svn-fetch@0.1.2",
  "dist": {
    "shasum": "6d7b331c02cfc2043e2d28a697feaddff213c3e9"
  },
  "_from": "grunt-svn-fetch@",
  "_resolved": "https://registry.npmjs.org/grunt-svn-fetch/-/grunt-svn-fetch-0.1.2.tgz"
}
