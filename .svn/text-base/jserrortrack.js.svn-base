var jserrortrack = (function (window) {

  // Instance stores a reference to the Singleton
  var instance;

  function init(options) {

    // Object.prototype.extendProp = function(obj) {
    //    for(i in obj)
    //       this[i] = obj[i];
    // };

    // var _onerrorOld = window.onerror;

    var config = {
      debugMode: true,
      url: 'http://localhost:1337/clientjserror/create',
      tracking: {
        info: false,
        warning: false,
        error: true,
        ajaxrequest: {
          error: true,
          info: false
        }
      }
    };

    // config.extendProp(options);

    var ajax = {};
    ajax.x = function() {
        if (typeof XMLHttpRequest !== 'undefined') {
            return new XMLHttpRequest();
        }
        var versions = [
            "MSXML2.XmlHttp.5.0",
            "MSXML2.XmlHttp.4.0",
            "MSXML2.XmlHttp.3.0",
            "MSXML2.XmlHttp.2.0",
            "Microsoft.XmlHttp"
        ];

        var xhr;
        for(var i = 0; i < versions.length; i++) {
            try {
                xhr = new ActiveXObject(versions[i]);
                break;
            } catch (e) {
            }
        }
        return xhr;
    };

    ajax.send = function(url, callback, method, data, sync) {
        var x = ajax.x();
        x.open(method, url, sync);
        x.onreadystatechange = function() {
            if (x.readyState == 4) {
                callback(x.responseText)
            }
        };
        if (method == 'POST') {
            x.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
        }
        x.send(JSON.stringify(data))
    };

    ajax.get = function(data, callback, sync) {
        var query = [];
        for (var key in data) {
            query.push(encodeURIComponent(key) + '=' + encodeURIComponent(data[key]));
        }
        ajax.send(config.url + '?' + query.join('&'), callback, 'GET', null, sync)
    };

    ajax.post = function(data, callback, sync) {
        var query = [];
        for (var key in data) {
            query.push(encodeURIComponent(key) + '=' + encodeURIComponent(data[key]));
        }
        ajax.send(config.url, callback, 'POST', query.join('&'), sync)
    };

    //  exceptions report
    function onerror (message, file, line, column, error) {
      if (error) {
        ajax.post({name: error.name, message: JSON.stringify(error.message), stack: JSON.stringify(error.stack)}, function (response) {
          console.log(response);
        });
      } else {
        ajax.post({
          error: {
            message: message,
            fileName: file,
            lineNumber: line,
            columnNumber: column || 0
          }}, function (response) {
                console.log(response);
          }
        );
      }
    }

    // jquery ajax request error report
    (function ajaxerror () {
      if (typeof $ === 'function' && config.tracking.ajaxrequest.error) {
        $(function () {
          //setup ajax error handling
          $.ajaxSetup({
              error: function (x, status, error) {
                ajax.post({error: JSON.stringify(error)}, function (response) { console.log(response); })
              }
          });
        });
      }
    })();

    window.onerror = function (message, file, line, column, error) {
      if (config.debugMode) {
        onerror(message, file, line, column, error);
      }
      // onerrortemp2(message, file, line, column, error);
    }
  };

  return {

    // Get the Singleton instance if one exists
    // or create one if it doesn't
    init: function (options) {

      if ( !instance ) {
        instance = init(options);
      }

      return instance;
    }

  };

})(window);
